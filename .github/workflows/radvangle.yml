# .github/workflows/build-radv-angle-android-arm64.yml
name: Build RADV & ANGLE Shared Libraries for Android arm64

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}    # optional manual trigger

jobs:
  build-android-arm64:
    runs-on: ubuntu-latest
    env:
      ANDROID_NDK_VERSION: r25                        # NDK version to download 7
      ANDROID_API: 34                                 # Android API level

    steps:
    - name: Clone Mesa from GitLab
      run: |
        git clone https://gitlab.freedesktop.org/mesa/mesa.git mesa
        cd mesa && git checkout main

    - name: Checkout ANGLE
      uses: actions/checkout@v3
      with:
        repository: google/angle
        path: angle
        ref: main                                    # avoid default-branch lookup errors

    - name: Install build deps
      run: |
        sudo apt-get update
        sudo apt-get install -y meson ninja-build ccache pkg-config lld python3 git curl unzip glslang-tools                                      # provides glslangValidator 0

    - name: Install depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "$PWD/depot_tools" >> $GITHUB_PATH

    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip install mako
        
    - name: Download & unpack Android NDK
      run: |
        wget https://dl.google.com/android/repository/android-ndk-${ANDROID_NDK_VERSION}-linux.zip
        unzip android-ndk-${ANDROID_NDK_VERSION}-linux.zip -d $HOME
        echo "$HOME/android-ndk-${ANDROID_NDK_VERSION}" >> $GITHUB_PATH

    - name: Create Meson cross-file for aarch64
      run: |
        mkdir -p ~/.config/meson
        CONFIG=~/.config/meson/android-aarch64.ini
        echo "[binaries]" > $CONFIG
        echo "ar = '$HOME/android-ndk-${ANDROID_NDK_VERSION}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar'" >> $CONFIG
        echo "c  = ['ccache', '$HOME/android-ndk-${ANDROID_NDK_VERSION}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang', '--target=aarch64-linux-android${ANDROID_API}']" >> $CONFIG
        echo "cpp = ['ccache', '$HOME/android-ndk-${ANDROID_NDK_VERSION}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++', '--target=aarch64-linux-android${ANDROID_API}', '-fno-exceptions', '-static-libstdc++']" >> $CONFIG
        echo "strip = '$HOME/android-ndk-${ANDROID_NDK_VERSION}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-strip'" >> $CONFIG
        echo "pkg-config = ['env', 'PKG_CONFIG_LIBDIR=$HOME/android-ndk-${ANDROID_NDK_VERSION}/pkgconfig', '/usr/bin/pkg-config']" >> $CONFIG
        echo "" >> $CONFIG
        echo "[host_machine]" >> $CONFIG
        echo "system = 'android'" >> $CONFIG
        echo "cpu_family = 'aarch64'" >> $CONFIG
        echo "cpu = 'armv8'" >> $CONFIG
        echo "endian = 'little'" >> $CONFIG

    - name: Build RADV as single .so
      working-directory: mesa
      run: |
        mkdir build-android-aarch64
        meson setup build-android-aarch64 \
          --cross-file ~/.config/meson/android-aarch64.ini \
          -Dplatforms=android \
          -Dplatform-sdk-version=${ANDROID_API} \
          -Dandroid-stub=true \
          -Dgallium-drivers= \
          -Dvulkan-drivers=amd                  # build the AMD/RADV driver 8
        meson compile -C build-android-aarch64    # outputs libvulkan_radeon.so

    - name: Build ANGLE shared libraries
      working-directory: angle
      run: |
        gclient sync
        gn gen out/Android --args='
          target_os="android"
          target_cpu="arm64"
          is_component_build=true
          is_debug=false
          angle_enable_vulkan=true
        '
        autoninja -C out/Android libEGL libGLESv2    # outputs .so files

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-shared-libs
        path: |
          mesa/build-android-aarch64/libvulkan_radeon.so
          angle/out/Android/libEGL.so
          angle/out/Android/libGLESv2.so
